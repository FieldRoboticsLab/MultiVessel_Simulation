<?xml version="1.0"?>
<launch>
<!-- In this launch file, we spawn multiple USVs in the VRX environment-->
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf"/>
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find multiple_vessels)/multiple_vessels_worlds/multiple_vessels.world" />
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="true" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="false"/>
  <!-- Set various other gazebo arguments-->
  <arg name="extra_gazebo_args" default=""/>
  <!-- Start in a default namespace -->
  <arg name="namespace"/>
  <!-- Do we lock the vessel to the world? 
  <arg name="wamv_locked" default="false" />-->
  <!-- Start paused? -->
  <arg name="paused" default="false"/>

  <!-- Initial USV location and attitude
  <arg name="x" default="-532" />
  <arg name="y" default="162" />
  <arg name="z" default="0.1" />
  <arg name="P" default="0" />
  <arg name="R" default="0" />
  <arg name="Y" default="1" />-->

  <!-- Allow user specified thruster configurations
       H = stern trusters on each hull
       T = H with a lateral thruster
       X = "holonomic" configuration 
  <arg name="thrust_config" default="T" />-->

  <!-- Do we load the VRX sensor suite?
  <arg name="vrx_sensors_enabled" default="true" /> -->

  <!-- Start Gazebo with the world file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"   value="$(arg world)"/>
    <arg name="verbose"      value="$(arg verbose)"/>
    <arg name="paused"       value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui"          value="$(arg gui)" />
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>

  <!-- Load robot model -->
  <!-- include our robots -->
  <!-- before we include our robots, we need to generate the robots.launch file by generateRobots.py file -->
  <!--<node pkg="vrx_gazebo" type="usvSpawner.py" name="spawner" output="screen"></node>-->


  <include file="$(find multiple_vessels)/launch/vessels.launch"/>

s

</launch>
